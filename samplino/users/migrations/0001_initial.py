# Generated by Django 5.0.7 on 2024-08-04 13:37

import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BannedFromSignIn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(db_index=True, max_length=16, verbose_name='phone number')),
                ('user_ip', models.GenericIPAddressField(db_index=True, verbose_name='user ip while trying to log in')),
                ('banned_until', models.DateTimeField(null=True, verbose_name='can not retry until')),
            ],
        ),
        migrations.CreateModel(
            name='BannedFromSignUp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(db_index=True, max_length=16, verbose_name='phone number')),
                ('user_ip', models.GenericIPAddressField(db_index=True, verbose_name='user ip while registering')),
                ('banned_until', models.DateTimeField(null=True, verbose_name='can not retry until')),
            ],
        ),
        migrations.CreateModel(
            name='PhoneNumberValidation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(max_length=16, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_username', message='Username must be Alphanumeric', regex='^[a-zA-Z0-9]*$')], verbose_name='phone number')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('last_sent_sms_code', models.CharField(max_length=16, verbose_name='last sent sms code')),
                ('last_sent_sms_datetime', models.DateTimeField(verbose_name='last sms sent at')),
                ('is_validated', models.BooleanField(default=False, verbose_name='is this number validated using this record')),
            ],
        ),
        migrations.CreateModel(
            name='UserPreRegister',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(max_length=16, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_username', message='Username must be Alphanumeric', regex='^[a-zA-Z0-9]*$')], verbose_name='phone number')),
                ('start_time', models.DateTimeField(auto_now_add=True, verbose_name='when user started registering with this number')),
                ('unique_registration_id', models.CharField(max_length=32, unique=True, verbose_name='unique id given to user to identify for completing registration')),
                ('is_registered', models.BooleanField(default=False, verbose_name='is user registered using this record?')),
            ],
        ),
        migrations.CreateModel(
            name='UserSignInTry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(db_index=True, max_length=16, verbose_name='phone number')),
                ('user_ip', models.GenericIPAddressField(db_index=True, verbose_name='user ip while trying to log in')),
                ('is_success', models.BooleanField(verbose_name='did this try resulted in a success')),
                ('is_used_for_ban', models.BooleanField(default=False, verbose_name='is this record used for banning')),
            ],
        ),
        migrations.CreateModel(
            name='UserSignUpTry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(db_index=True, max_length=16, verbose_name='phone number')),
                ('user_ip', models.GenericIPAddressField(db_index=True, verbose_name='user ip while registering')),
                ('is_success', models.BooleanField(verbose_name='did this try resulted in a success')),
                ('is_used_for_ban', models.BooleanField(default=False, verbose_name='is this record used for banning')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(max_length=16, unique=True, validators=[django.core.validators.RegexValidator(code='invalid number', message='number you entered is invalid', regex='^09[0-3,9]\\d{8}$')], verbose_name='phone number')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
